@page "/clientes"
@attribute [StreamRendering]
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Clientes</h3>

<div class="form-group">
    <input type="text" class="form-control" @bind="searchTerm" @oninput="OnSearchTermChanged" placeholder="Search by name, CUIT, or email">
</div>

@if (clientes == null)
{
    <p>Loading...</p>
}
else if (filteredClientes.Count == 0)
{
    <p>No clientes found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th>Fecha de Nacimiento</th>
                <th>CUIT</th>
                <th>Domicilio</th>
                <th>Teléfono Celular</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in filteredClientes)
            {
                <tr>
                    <td>@cliente.ID</td>
                    <td>@cliente.Nombres</td>
                    <td>@cliente.Apellidos</td>
                    <td>@cliente.FechaNacimiento.ToShortDateString()</td>
                    <td>@cliente.CUIT</td>
                    <td>@cliente.Domicilio</td>
                    <td>@cliente.TelefonoCelular</td>
                    <td>@cliente.Email</td>
                    <td><button @onclick="() => AbrirPopup(cliente)">Editar Cliente</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ClienteDTO[] clientes;
    private List<ClienteDTO> filteredClientes;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        // Fetch data from the API endpoint
        clientes = await HttpClient.GetFromJsonAsync<ClienteDTO[]>("http://localhost:5024/api/v1/Cliente");

        // Initially, show all clients
        filteredClientes = clientes.ToList();
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            // If search term is empty, show all clients
            filteredClientes = clientes.ToList();
        }
        else
        {
            // Filter clients based on search term
            filteredClientes = clientes.Where(cliente =>
                cliente.Nombres.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                cliente.CUIT.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                cliente.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    // Call ApplySearch method when search term changes
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        ApplySearch();
        await InvokeAsync(StateHasChanged);
    }

    private async Task AbrirPopup(ClienteDTO cliente)
    {
        var url = $"{NavigationManager.BaseUri}clientes/detalle/{cliente.ID}";
        var windowFeatures = "toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=800,height=600";

        await JSRuntime.InvokeVoidAsync("open", url, "_blank", windowFeatures);
    }

    public class ClienteDTO
    {
        public int ID { get; set; }
        public string Nombres { get; set; }
        public string Apellidos { get; set; }
        public DateTime FechaNacimiento { get; set; }
        public string CUIT { get; set; }
        public string Domicilio { get; set; }
        public string TelefonoCelular { get; set; }
        public string Email { get; set; }
    }
}
